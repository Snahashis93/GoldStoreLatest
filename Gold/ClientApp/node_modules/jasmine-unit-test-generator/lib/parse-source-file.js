"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
function parseSourceFile(file) {
    const result = {
        imports: [],
        classes: []
    };
    walker(file);
    return result;
    function walker(node) {
        switch (node.kind) {
            case ts.SyntaxKind.ImportDeclaration:
                importsWalker(node);
                break;
            case ts.SyntaxKind.ClassDeclaration:
                classWalker(node);
                break;
            default:
                ts.forEachChild(node, walker);
        }
    }
    function classWalker(node) {
        const klass = {
            name: node.name && node.name.escapedText,
            dependencies: []
        };
        ts.forEachChild(node, (child) => {
            if (child.kind === ts.SyntaxKind.Constructor) {
                const constructor = child;
                constructor.parameters.forEach(param => {
                    klass.dependencies.push({
                        name: param.name.getText(),
                        type: param.type && param.type.getText(),
                        token: extractInjectionToken(param)
                    });
                });
            }
        });
        result.classes.push(klass);
    }
    function extractInjectionToken(param) {
        let token;
        if (param.decorators) {
            param.decorators.forEach(decoratorWalker);
        }
        return token;
        function decoratorWalker(node) {
            switch (node.kind) {
                case ts.SyntaxKind.CallExpression:
                    const callExpression = node;
                    if (callExpression.expression.getText() === 'Inject' && callExpression.arguments.length > 0) {
                        token = callExpression.arguments[0].getText();
                    }
                    break;
                default:
                    ts.forEachChild(node, decoratorWalker);
            }
        }
    }
    function importsWalker(node) {
        const names = [];
        if (node.importClause) {
            ts.forEachChild(node.importClause, (child) => {
                ts.forEachChild(child, (element) => {
                    names.push(element.getText());
                });
            });
        }
        result.imports.push({
            path: node.moduleSpecifier.getText(),
            names
        });
    }
}
exports.parseSourceFile = parseSourceFile;
